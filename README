.. -*- rst -*-

.. : vim: set syntax=rst :

=========
egfractal
=========

--------------------------------------------------
Command-line tools for auto-generating fractal art
--------------------------------------------------

:Author: Paul Bailey <roscidcup@falstaffandme.com>
:Date: December 2018

**egfractal** is my blanket term for source code I use
for generating fractal art.
The “eg” part stands for “evil genius.”
I added it to reduce confusion with other software
with “fractal” in its name;
it was not intended as some sort of impudent proprietary claim.

Licensing
---------

See COPYING in this directory.

Portability
-----------

I am making this public in the hopes that it may be useful,
but since it works well enough on my systems
(Ubuntu 18.04, macOS 10.15, and Cygwin on Windows 10)
I do not test it much for portability.
I try to make at least the C code be as generally POSIXive as possible,
though I do use some Gnu-specifics like ``getopt_long``,
``__attribute__``, and such.

You need POSIX threads (``<pthread.h>``) to be supported on your
system for ``mbrot2`` and  ``bbrot2`` to be multi-threaded.  Otherwise
they will run on only one CPU and be a *lot* slower.

Optimizations
-------------

``mbrot2`` and ``bbrot2`` use POSIX threads to split up the
workload over different parts of the image to render.  By
default, four threads are created.  To use more or less, use
the ``--nthread`` option.
RAM is the only system resource used
during the multi-threaded algorithmic portion of the programs —
no sytem calls are made —
so it makes sense to base ``--nthread``
on the number of *cores* your machine has
rather than the number of *threads*.

**TODO**: Run an actual physical test of the above statement
on a hyperthread-able machine and update this README.

``mbrot2`` splits up the workload by selecting different parts
of the image to render for different threads (interleaved,
since it doesn't know in advance which parts of the image
are more complicated than others).
Since ``bbrot2`` "traces the path,"
it splits up the workload by
simply giving each thread a smaller number
of random starting points to trace.

.. note::

   If your system supports pthreads but does not actually
   split the threads between different CPUs —
   for example if you are using Cygwin —
   you will probably actually **lose** a little performance,
   due to the added overhead of context switching.
   In such a case, you should explicitly use ``--nthread=1``.

See :doc:`How It Works <how-it-works.txt>` for
the nerdier details of how it all works.

System Requirements
-------------------

All you really need is a Unix-like environment and the Gnu
C compiler, or at least one that supports certain Gnu
extentions.  (Having the Gnu version of libc and libm might also
be important, but I don't have a PC sans glibc for trying it out.
The only non-POSIX function I use that I'm aware of is
``getopt_long``.)

For best performance, use a machine with enough RAM for the program to
allocate without having to swap.  How much RAM does the software use?
It depends mainly on the dimensions of the image you are generating.  For
example, in ``bbrot2``, each RGB channel has an array of
``unsigned long``’s whose length is the number of pixels, in addition to
a similar array of ``long double`` (quad double, depending on compiler)...
times the number of threads plus one...  in addition to a few other arrays.
For a large 6000x6000 bitmap, a program could take up to two or three
hundred megabytes of RAM per thread.

Building
--------

If you are getting this from Github, you need to have **autotools**
and **libtool** installed on your computer, so you can generate the
``configure`` script.

::
        $ sudo apt install automake autoconf libtool

(or ``brew install`` or ``yum``-something-or-other…).

When you have those programs installed you can run ``autoreconf``
to build the ``configure`` script.

::

        $ autoreconf -i

After that, run the conventional chain of commands:

::

        $ ./configure
        $ make
        $ make install

Since you are building programs with simple names like ``mbrot2``,
``julia1``, etc.,
which could cause namespace issues with other programs in your path
that have the same name,
I do NOT recommend using ``make install``,
unless you have a favorite local prefix, like your ``$HOME`` directory.

:TODO: Rename these programs so this isn’t an issue.

Using the Programs
------------------

:TODO: Write ``man`` pages and mention them here.

Known Bugs
----------

The algorithms for equalization are very rudimentary.
Basically, once you find the image you want to render, it's
best to turn off any normalization option and just render it
as-is, then fix it up in a program like Photoshop.

Something about the distance-to-color selection isn't very
scalable when changing the ``-h`` and ``-w`` options for what is
otherwise the same image tend to result in images fading out as
they get bigger.  This makes sense, as more, *closer*, pixels
are calculated in the bigger images than in the smaller images.
This means that the scaling will be non-linear.  NEEDED: some
kind of function of pixel precision, so that the ``-Nnorm=xxx``
option does not so frequently have to be retweaked whenever
the ``-h`` and ``-w`` options change.


Gallery
-------

All of the following images were auto-generated by the
programs in **egfractal** without any additional processing
(Photoshop or whatnot).

Mandelbrot Images
~~~~~~~~~~~~~~~~~

.. figure:: png/readme-10.png
        :width: 3in
.. figure:: png/readme-15.png
        :width: 3in
.. figure:: png/readme-16.png
        :width: 3in
.. figure:: png/readme-17.png
        :width: 3in
.. figure:: png/readme-18.png
        :width: 3in
.. figure:: png/readme-19.png
        :width: 3in
.. figure:: png/readme-20.png
        :width: 3in

Buddhabrot Images
~~~~~~~~~~~~~~~~~

.. figure:: png/readme-1.png
        :width: 3in

        ``buddhabrot1 -p50000000 -w300 -h300``
.. figure:: png/readme-2.png
        :width: 3in

        ``buddhabrot1 --xline 0.0 -w300 -h300 --equalize=20.0``

.. figure:: png/readme-3.png
        :width: 3in

        ``buddhabrot1 --xline 0.1 -w300 -h300``
.. figure:: png/readme-4.png
        :width: 3in

        ``buddhabrot1 --yline 0.1 -w300 -h300``

.. figure:: png/readme-5.png
        :width: 3in

        ``buddhabrot1 --yline 0.1 -w300 -h300 --equalize=20.0``

.. figure:: png/readme-6.png
        :width: 3in

        ``buddhabrot1 -s -r5000 -m4000 -w300 -h300 -p10000000 --equalize=10.0``

.. figure:: png/readme-7.png
        :width: 3in

        ``buddhabrot1 -s -r5000 -m4000 -w300 -h300 -p10000000 --equalize=10.0 --negate``

        Note that this image is *not* the exact color inverse of the previous.
        That is because at this random-sample/pixel density,
        the final generated image itself has a modicum of randomness too.

        Unfortunately this randomness doesn't scale up very well.
